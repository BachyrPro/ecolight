// Cl√© de stockage du token
const TOKEN_KEY = 'token';

// Sauvegarder le token
export const saveToken = (token) => {
  console.log('üíæ Sauvegarde token:', token ? 'Token pr√©sent' : 'Token vide');
  localStorage.setItem(TOKEN_KEY, token);
};

// Alias pour compatibilit√©
export const setToken = saveToken;

// R√©cup√©rer le token
export const getToken = () => {
  const token = localStorage.getItem(TOKEN_KEY);
  console.log('üîë R√©cup√©ration token:', token ? 'Token pr√©sent' : 'Aucun token');
  return token;
};

// Supprimer le token
export const removeToken = () => {
  console.log('üóëÔ∏è Suppression token');
  localStorage.removeItem(TOKEN_KEY);
  localStorage.removeItem('user');
};

// V√©rifier si l'utilisateur est authentifi√©
export const isAuthenticated = () => {
  const token = getToken();
  if (!token) {
    console.log('‚ùå Pas de token - non authentifi√©');
    return false;
  }

  try {
    // D√©coder le payload du JWT (partie centrale entre les points)
    const payload = JSON.parse(atob(token.split('.')[1]));
    
    // V√©rifier si le token a expir√©
    if (payload.exp) {
      const expirationTime = payload.exp * 1000; // Convertir en millisecondes
      const isValid = Date.now() < expirationTime;
      
      if (!isValid) {
        console.log('‚è∞ Token expir√©');
        removeToken();
        return false;
      }
    }
    
    console.log('‚úÖ Token valide');
    return true;
  } catch (error) {
    console.error('üí• Erreur lors de la v√©rification du token:', error);
    removeToken();
    return false;
  }
};

// R√©cup√©rer les donn√©es du token
export const getTokenData = () => {
  const token = getToken();
  if (!token) return null;

  try {
    const payload = JSON.parse(atob(token.split('.')[1]));
    return payload;
  } catch (error) {
    console.error('Erreur lors du d√©codage du token:', error);
    return null;
  }
};

// R√©cup√©rer l'utilisateur depuis le token
export const getUserFromToken = () => {
  const tokenData = getTokenData();
  if (!tokenData) return null;

  return {
    id: tokenData.id,
    email: tokenData.email,
    nom: tokenData.nom,
    role: tokenData.role
  };
};

// Configurer axios pour inclure automatiquement le token
export const setupAxiosInterceptors = (axios) => {
  // Intercepteur de requ√™te
  axios.interceptors.request.use(
    (config) => {
      const token = getToken();
      if (token) {
        config.headers.Authorization = `Bearer ${token}`;
        console.log('üì§ Ajout token √† la requ√™te:', config.url);
      }
      return config;
    },
    (error) => {
      return Promise.reject(error);
    }
  );

  // Intercepteur de r√©ponse - SANS redirection automatique
  axios.interceptors.response.use(
    (response) => {
      return response;
    },
    (error) => {
      // Ne pas rediriger automatiquement, laisser les composants g√©rer l'erreur
      console.log('‚ö†Ô∏è Erreur HTTP:', error.response?.status, error.config?.url);
      return Promise.reject(error);
    }
  );
};